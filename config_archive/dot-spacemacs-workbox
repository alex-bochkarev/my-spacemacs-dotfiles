;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers/")

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(vimscript
     rust
     javascript
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     auto-completion
     better-defaults
     emacs-lisp
     git
     helm
     (lsp :variable lsp-ui-sideline-enable nil)
     markdown
     dash

     html
     yaml
     restructuredtext

     graphviz
     c-c++
     (python :variables
             python-fill-column 69
             python-formatter 'yapf
             python-backend 'lsp
             python-lsp-server 'pyright)
     (conda :variables conda-anaconda-home "/home/bochkarev/distrib/anaconda3")
     (ess :variables ess-r-backend 'lsp)

     haskell
     ;; (julia :variables julia-backend 'lsp
     ;;        lsp-julia-flags `("-J/home/bochkarev/distrib/julia-1.6.2/languageserver.so"))
     julia

     (latex :variables latex-enable-folding t
            latex-enable-magic nil)

     bibtex
     pdf
     finance ;; ledger layer
     csv
     evil-commentary
     (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t)
     themes-megapack
     unicode-fonts
     (vinegar :variables
              vinegar-reuse-dired-buffer t)
     ;; elfeed setup
     (elfeed :variables rmh-elfeed-org-files (list "~/.spacemacs.d/elfeed.org"))
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-position 'bottom)

     ;; org-related setup
     (org :variables
          org-enable-roam-support t
          org-enable-org-journal-support t
          org-enable-github-support t
          org-projectile-file "TODOs.org"
          org-enable-hugo-support t)

     ;; mail setup
     (mu4e :variables
           mu4e-installation-path "/usr/local/share/emacs/site-lisp/mu4e")

     (ipython-notebook :variables ein-backend 'jupyter)

     spell-checking
     syntax-checking
     version-control
     treemacs)


   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer (generally the packages are installed only and should still be
   ;; loaded using load/require/use-package in the user-config section below in
   ;; this file). If you need some configuration for these packages, then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'. To use a local version of a package, use the
   ;; `:location' property: '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '(
                                      org-msg ;; for composing HTML email
                                      key-chord
                                      leuven-theme
                                      org-roam-bibtex
                                      keyfreq
                                      )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default (format "spacemacs-%s.pdmp" emacs-version))
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. Spacelpa is currently in
   ;; experimental state please use only for testing purposes.
   ;; (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; The minimum delay in seconds between number key presses. (default 0.4)
   dotspacemacs-startup-buffer-multi-digit-delay 0.4

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'emacs-lisp-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent nil

   ;; If non-nil, `kill-buffer' on *scratch* buffer
   ;; will bury it instead of killing.
   dotspacemacs-scratch-buffer-unkillable nil

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(doom-gruvbox leuven)
   ;; (the list contained spacemacs-dark and spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   ;;dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)
   dotspacemacs-mode-line-theme '(doom)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts. The `:size' can be specified as
   ;; a non-negative integer (pixel size), or a floating-point (point size).
   ;; Point size is recommended, because it's device independent. (default 10.0)
   dotspacemacs-default-font '("Iosevka Term"
                               :size 12.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Show the scroll bar while scrolling. The auto hide time can be configured
   ;; by setting this variable to a number. (default t)
   dotspacemacs-scroll-bar-while-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers 'visual

   ;; Code folding method. Possible values are `evil', `origami' and `vimish'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil and `dotspacemacs-activate-smartparens-mode' is also non-nil,
   ;; `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil smartparens-mode will be enabled in programming modes.
   ;; (default t)
   dotspacemacs-activate-smartparens-mode t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server t

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; If nil then Spacemacs uses default `frame-title-format' to avoid
   ;; performance issues, instead of calculating the frame title by
   ;; `spacemacs/title-prepare' all the time.
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Show trailing whitespace (default t)
   dotspacemacs-show-trailing-whitespace t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfer with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; If non-nil shift your number row to match the entered keyboard layout
   ;; (only in insert state). Currently supported keyboard layouts are:
   ;; `qwerty-us', `qwertz-de' and `querty-ca-fr'.
   ;; New layouts can be added in `spacemacs-editing' layer.
   ;; (default nil)
   dotspacemacs-swap-number-row nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first.")


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ; yasnippet
  (setq yas-snippet-dirs (append yas-snippet-dirs
                                 '("~/.spacemacs.d/snippets"))) ;; append with a personal snippets collection

  ;; keyfreq setup
  (setq keyfreq-file (concat spacemacs-cache-directory "ab-emacs.keyfreq"))
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  ;; some orgmode customizations

  ;; key files for the ecosystem

  (setq org-readme-file "~/org/readme.org")
  (setq org-quotes-file "~/org/quotes.org")
  (setq org-distractions-file "~/org/fun.org")
  (setq org-current-file "~/org/current.org")
  (setq org-blog-file "~/PKB/notes/blog.org")
  (setq org-daily-summary-file "~/org/summaries.org.gpg")
  (setq org-mobile-file "~/Dropbox/orgzly/mobile-refile.org")

  ;; agenda set up
  (setq org-agenda-files
        '("~/org"
          "~/projects/DSPI"
          "~/projects/disser"
          "~/projects/disser_pres"
          "~/PKB/notes/website.org"))

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "WIP(w)" "KONTROLLE(k@)" "LATER(l)" "|" "DONE(d!)" "CANCELED(q@!)"))))

  (setq org-use-fast-todo-selection t)
  ;; extracting dates: needed to generate
  ;; todo-lists for the team
  (defun ab/get-date-if-not-nil(datearg)
    "Returns date if not nil and nil otherwise"
    (interactive)
    (if datearg
        (format-time-string "%d-%m-%Y" datearg)
      "          "))
  ;; ============================== The Core: custom agenda setup ==============================================
  (setq org-agenda-custom-commands
        '(
          ("d" "Daily agenda"
           (
            (agenda "" ((org-agenda-overriding-header "== Calendar: ==============================================="))
                    (org-agenda-sorting-strategy '(priority-down)))
            (todo "WIP"
                       ((org-agenda-overriding-header "== Started / WIP: ===============================================")))
            (todo "KONTROLLE"
                       ((org-agenda-overriding-header "== KONTROLLE / waiting: ======================================"))
                       (org-agenda-sorting-strategy '(priority-down)))
            (todo "LATER"
                       ((org-agenda-overriding-header "== LATER pool: ============================================")
                        ))
            (todo "TODO"
                  ((org-agenda-overriding-header "== Not scheduled: ============================================")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline 'timestamp))))))

          ("c" "The calendar plan: key dates."
           ((tags "keydate"
                  ((org-agenda-prefix-format "%c: %i %?-12(concat \"\" (ab/get-date-if-not-nil (org-get-deadline-time nil)) \" -- \" )")
                   (org-agenda-todo-keyword-format "")
                   (org-agenda-sorting-strategy '(deadline-up))
                   (org-agenda-overriding-header "== KEY MILESTONES - calendar plan =========================================\n")
                   (org-agenda-remove-tags t)))))))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  ;; ============================== End of the custom agenda setup ==============================================

  ;; some minor customizations
  (require 'ox-extra) ;; :ignore: feature
  (ox-extras-activate '(ignore-headlines))

  (setq org-list-allow-alphabetical t)
  (require 'org-tempo) ;; for <s type templates to work
  (setq org-startup-folded t)
  (setq org-ellipsis "⋱") ;; Other interesting characters are ⤵, ▼, ↴, ⬎, ⤷, and ⋱

  ;; Use minted for syntax highlighting
  (defun ab/tex-add-minted ()
    "Adds support for the `minted` package (listings in latex) for orgmode export."
    (interactive)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    ;; Sample minted options.
    (setq org-latex-minted-options '(
                                     ("frame" "lines")
                                     ("fontsize" "\\scriptsize")
                                     ("xleftmargin" "\\parindent")
                                     ("linenos" ""))))

  ;; Add the shell-escape flag
  ;; (setq org-latex-pdf-process '(
  ;;                               "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;                               ;; "bibtex %b"
  ;;                               "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;                               "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-pdf-process '("latexmk -shell-escape -pdf -outdir=%o %f"))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; (key-chord-mode 1)
  ; (key-chord-define evil-insert-state-map "df" 'evil-escape)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; email setup (with mu4e)

  (with-eval-after-load 'mu4e
    (setq mu4e-attachment-dir "~/Downloads/email")
    (setq mu4e-change-filenames-when-moving t)

    ;; config based on the Spacemacs docs
    ;; Set up some common mu4e variables

    (setq mu4e-maildir "~/.mail"
          mu4e-get-mail-command "mbsync -a"
          mu4e-update-interval nil
          mu4e-compose-signature-auto-include nil
          mu4e-view-show-images t
          mu4e-view-show-addresses t)

    ;; Mail directory shortcuts
    (setq mu4e-maildir-shortcuts
          '(("/CU/INBOX" . ?c)
            ("/personal/INBOX" . ?p)
            ("/legacy/INBOX" . ?l)))

    ;; Bookmarks
    (setq mu4e-bookmarks
          `(("flag:unread AND NOT flag:trashed AND NOT maildir:/\/.+\/Trash/" "Unread messages" ?u)
            ("date:today..now AND NOT maildir:/\/.+\/Trash/" "Today's messages" ?t)
            ("date:7d..now AND NOT flag:trashed AND NOT maildir:/\/.+\/Trash/" "Last 7 days" ?w)
            ("flag:flagged" "Flagged/starred" ?f)
            (,(mapconcat 'identity
                         (mapcar
                          (lambda (maildir)
                            (concat "maildir:" (car maildir)))
                          mu4e-maildir-shortcuts) " OR ")
             "All inboxes" ?i)))

    ;; setting up contexts
    ;; source: https://www.djcbsoftware.nl/code/mu/mu4e/Contexts-example.html
    (setq mu4e-contexts
          `( ,(make-mu4e-context
	             :name "Pri"
	             :enter-func (lambda () (mu4e-message "Entering Private context"))
               :leave-func (lambda () (mu4e-message "Leaving Private context"))
	             ;; we match based on maildir
	             :match-func (lambda (msg)
			                       (when msg
			                         (string-match-p "^/personal" (mu4e-message-field msg :maildir))))
	             :vars '( ( user-mail-address	    . "a@bochkarev.io"  )
		                    ( user-full-name	    . "Alexey Bochkarev" )
		                    ( mu4e-compose-signature .
		                      (concat
		                       "Alexey Bochkarev\n"
                           "https://www.bochkarev.io\n"
		                       "telegram: @abochka\n"))
                        ;; set up maildir folders
                        (mu4e-sent-folder . "/personal/Sent")
	                      (mu4e-drafts-folder . "/personal/Drafts")
	                      (mu4e-trash-folder . "/personal/Trash")
                        (mu4e-refile-folder . "/personal/Archive")
                        ;; sending mail preferences
                        (mu4e-sent-messages-behavior . sent)
                        (smtpmail-queue-dir . "~/.mail/personal/queue/cur")
	                      (message-send-mail-function . smtpmail-send-it)
	                      (smtpmail-smtp-user . "a@bochkarev.io")
	                      (smtpmail-starttls-credentials . (("smtp.mailbox.org" 587 nil nil)))
	                      (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
	                      (smtpmail-default-smtp-server . "smtp.mailbox.org")
	                      (smtpmail-smtp-server . "smtp.mailbox.org")
	                      (smtpmail-smtp-service . 587)
                        (stmpmail-stream-type 'ssl)
	                      (smtpmail-debug-info . t)
	                      (smtpmail-debug-verbose . t)
                        ))
             ,(make-mu4e-context
	             :name "CU"
	             :enter-func (lambda () (mu4e-message "Switch to the Clemson context"))
               :leave-func (lambda () (mu4e-message "Leaving Clemson context"))
	             ;; no leave-func
	             ;; we match based on the maildir of the message
	             ;; this matches maildir ... and its sub-directories
	             :match-func (lambda (msg)
			                       (when msg
			                         (string-match-p "^/CU" (mu4e-message-field msg :maildir))))
	             :vars '( ( user-mail-address	     . "abochka@g.clemson.edu" )
		                    ( user-full-name	     . "Alexey Bochkarev" )
		                    ( mu4e-compose-signature  .
		                      (concat
		                       "Alexey Bochkarev\n"
                           "https://www.bochkarev.io\n"
		                       "telegram: @abochka\n"))
                        ;; set up maildir folders
                        (mu4e-sent-folder . "/CU/Sent")
	                      (mu4e-drafts-folder . "/CU/Drafts")
	                      (mu4e-trash-folder . "/CU/Trash")
                        (mu4e-refile-folder . "/CU/Archive")
                        ;; sending mail preferences
                        (mu4e-sent-messages-behavior . delete)
                        (smtpmail-queue-dir . "~/.mail/CU/queue/cur")
	                      (message-send-mail-function . smtpmail-send-it)
	                      (smtpmail-smtp-user . "abochka@g.clemson.edu")
	                      (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
	                      (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
	                      (smtpmail-default-smtp-server . "smtp.gmail.com")
	                      (smtpmail-smtp-server . "smtp.gmail.com")
	                      (smtpmail-smtp-service . 587)
	                      (smtpmail-debug-info . t)
	                      (smtpmail-debug-verbose . t)
                        ))
,(make-mu4e-context
	             :name "legacy"
	             :enter-func (lambda () (mu4e-message "Switch to the legacy gmail context"))
               :leave-func (lambda () (mu4e-message "Leaving legacy gmail context"))
	             ;; no leave-func
	             ;; we match based on the maildir of the message
	             ;; this matches maildir ... and its sub-directories
	             :match-func (lambda (msg)
			                       (when msg
			                         (string-match-p "^/legacy" (mu4e-message-field msg :maildir))))
	             :vars '( ( user-mail-address	     . "aabochkaryov@gmail.com" )
		                    ( user-full-name	     . "Alexey Bochkarev" )
		                    ( mu4e-compose-signature  .
		                      (concat
		                       "Alexey Bochkarev\n"
                           "https://www.bochkarev.io\n"
		                       "telegram: @abochka\n"))
                        ;; set up maildir folders
                        (mu4e-sent-folder . "/legacy/Sent")
	                      (mu4e-drafts-folder . "/legacy/Drafts")
	                      (mu4e-trash-folder . "/legacy/Trash")
                        (mu4e-refile-folder . "/legacy/Archive")
                        ;; sending mail preferences
                        (mu4e-sent-messages-behavior . delete)
                        (smtpmail-queue-dir . "~/.mail/legacy/queue/cur")
	                      (message-send-mail-function . smtpmail-send-it)
	                      (smtpmail-smtp-user . "aabochkaryov@gmail.com")
	                      (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
	                      (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
	                      (smtpmail-default-smtp-server . "smtp.gmail.com")
	                      (smtpmail-smtp-server . "smtp.gmail.com")
	                      (smtpmail-smtp-service . 587)
	                      (smtpmail-debug-info . t)
	                      (smtpmail-debug-verbose . t)
                        ))
             )))

  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'ask-if-none) ;; that's default, I guess

  ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
  ;; guess or ask the correct context, e.g.

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  ;; (setq mu4e-context-policy 'pick-first)

  ;; compose with the current context is no context matches;
  ;; default is to ask
  ;; (setq mu4e-compose-context-policy nil)

  ;; the story with trashing
  ;; see https://github.com/djcb/mu/issues/1136
  (with-eval-after-load 'mu4e
    (setf (alist-get 'trash mu4e-marks)
          (list :char '("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (target msg)
                              (mu4e-get-trash-folder msg))
                :action (lambda (docid msg target)
                          ;; Here's the main difference to the regular trash mark,
                          ;; no +T before -N so the message is not marked as
                          ;; IMAP-deleted:
                          (mu4e~proc-move docid (mu4e~mark-check-target target) "-N"))))
    (add-hook 'mu4e-headers-mode-hook
	            (defun my/mu4e-change-headers ()
	              (interactive)
	              (setq mu4e-headers-fields
		                  `((:human-date . 12)
		                    (:flags . 4)
		                    (:from-or-to . 15)
		                    (:subject . ,(- (window-body-width) 47))
		                    (:size . 7))))))

  ;; sending mail config
  (setq mu4e-compose-in-new-frame t
        ;; mu4e-sent-messages-behavior 'delete ;; set up on the per-context basis
        mu4e-compose-signature-auto-include t
        mu4e-compose-format-flowed t
        org-mu4e-convert-to-html t)

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "My settings for message composition."
              (visual-line-mode)
              (use-hard-newlines -1)
              (flyspell-mode)))
  (require 'smtpmail)
  (setq smtpmail-queue-mail nil)  ;; start in normal mode

  (setq org-mu4e-convert-to-html t)
  (setq mu4e-view-show-addresses 't)


  (setq message-kill-buffer-on-exit t)
  (setq mu4e-compose-dont-reply-to-self t)
  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)

  ;; set up org-msg
  (setq mail-user-agent 'mu4e-user-agent)

  (setq org-msg-options "tex:dvipng html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	      org-msg-startup "hidestars indent inlineimages"
	      org-msg-default-alternatives '(text html))
  ;; (org-msg-mode) ;; so it fires up by default

  (setq my-email "abochka@g.clemson.edu")

  ;; set up attaching emails from within dired
  ;; (see the FAQ in the manual for details)
  ;;
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
     	    (set-buffer buffer)
     	    (when (and (derived-mode-p 'message-mode)
     		             (null message-sent-message-via))
     	      (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

  ;; after that, mark the file(s) in dired and ~C-c~ ~RET~ ~C-a~
  ;; (will ask whether to attach to an existing, or a new message

  ;;end of email config (mu4e) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; babel setup
    (setq org-ditaa-jar-path "/usr/bin/ditaa")
    (setq inferior-julia-program-name "~/distrib/julia-1.6.2/bin/julia")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ditaa . t)
       (dot . t)
       (python . t)
       (julia . t)
       (shell . t)
       (R . t)
       (plantuml . t)
       (makefile . t)
       ;; (ipython . t)
       )) ; this line activates ditaa

    (setq org-src-fontify-natively t
          org-src-window-setup 'current-window ;; edit in current window
          org-src-strip-leading-and-trailing-blank-lines t
          org-src-preserve-indentation t ;; do not put two spaces on the left
          org-src-tab-acts-natively t)


    (setq org-edit-src-content-indentation 0)

    (setq org-list-allow-alphabetical t)

    ;; (setq python-indent-offset 4)
    ;; (setq pipenv-with-flycheck nil)

;;   ;; don’t prompt me to confirm everytime I want to evaluate a block
;;   (setq org-confirm-babel-evaluate nil)

;; ;;; display/update images in the buffer after I evaluate
;;   (add-hook ‘org-babel-after-execute-hook ‘org-display-inline-images ‘append)

  ;; ;; i3-specific settings
  ;; (setq i3/dotfile "~/.config/i3/config")
  ;; (setq i3/status "~/.config/i3status/config")
  ;; (setq  aux/myrmidon "~/.config/myrmidon.tasks")
  ;; (setq  aux/qutebrowser "~/.config/qutebrowser/config.py")

  ;; (defun ab-find-i3-config ()
  ;;   "Edit the `dotfile', in the current window."
  ;;   (interactive)
  ;;   (find-file-existing i3/dotfile))

  ;; (defun ab-find-i3-status ()
  ;;   "Edit the `dotfile', in the current window."
  ;;   (interactive)
  ;;   (find-file-existing i3/status))

  ;; (defun ab-find-aux-tasks ()
  ;;   "Edit the `dotfile', in the current window."
  ;;   (interactive)
  ;;   (find-file-existing aux/myrmidon))

  ;; (defun ab-find-qutebrowser ()
  ;;   "Edit the `dotfile', in the current window."
  ;;   (interactive)
  ;;   (find-file-existing aux/qutebrowser))

  ;; (spacemacs/declare-prefix "fd" "dotfiles")
  ;; (spacemacs/set-leader-keys "fd3" 'ab-find-i3-config)
  ;; (spacemacs/set-leader-keys "fds" 'ab-find-i3-status)
  ;; (spacemacs/set-leader-keys "fdt" 'ab-find-aux-tasks)
  ;; (spacemacs/set-leader-keys "fdq" 'ab-find-qutebrowser)
  ;; (spacemacs/set-leader-keys "fdz" 'ab-fin)

  ;; general user keybindings
  (spacemacs|define-transient-state ab|goto-config-file
    :title "dotfiles menu"
    :doc
    "\n [_e_] emacs [_3_] i3wm [_s_] i3-status [_o_] \"Open\" menu\n [_b_] qutebrowser [_z_] z-shell [_a_] aliases [_t_] terminal\n [_f_] fvwm [_c_] config folder [_q_] quit"
    :bindings
    ("e" (find-file "~/.spacemacs") :exit t)
    ("3" (find-file "~/.config/i3/config") :exit t)
    ("s" (find-file "~/.config/i3status-rust/config.toml") :exit t)
    ("o" (find-file "~/.config/myrmidon.tasks") :exit t)
    ("b" (find-file "~/.config/qutebrowser/config.py") :exit t)
    ("z" (find-file "~/.zshrc") :exit t)
    ("a" (find-file "~/ab-unixtools/zsh_aliases") :exit t)
    ("t" (find-file "~/.config/alacritty/alacritty.yml") :exit t)
    ("f" (find-file "~/.config/fvwm/config") :exit t)
    ("c" (find-file "~/.config/") :exit t)
    ("q" nil :exit t))

  (spacemacs/set-leader-keys "fd" 'spacemacs/ab|goto-config-file-transient-state/body)

  (spacemacs|define-transient-state ab|goto-file
    :title "Special files menu"
    :doc
    "\n [_f_] Current org-file [_r_] Reading list [_d_] Distracted [_m_] mobile inbox [_j_] Job search [_w_] website notes [_q_] quit"
    :bindings
    ("f" (find-file org-current-file) :exit t)
    ("r" (find-file org-readme-file) :exit t)
    ("d" (find-file org-distractions-file) :exit t)
    ("m" (find-file org-mobile-file) :exit t)
    ("j" (find-file "~/org/js2021.org") :exit t)
    ("w" (find-file "~/PKB/notes/website.org") :exit t)
    ("q" nil :exit t))

  (global-set-key (kbd "H-f") 'spacemacs/ab|goto-file-transient-state/body)

  (global-set-key (kbd "H-c") 'org-capture)
  (global-set-key (kbd "H-s") 'save-buffer)
  (global-set-key (kbd "H-w") 'spacemacs/kill-this-buffer)
  (global-set-key (kbd "H-/") 'org-roam-find-file)
  (global-set-key (kbd "H-a") 'org-agenda)
  (global-set-key (kbd "H-t") 'org-projectile/goto-todos)
  (global-set-key (kbd "H-z") 'helm-semantic-or-imenu)
  (global-set-key (kbd "H-\\") 'zeal-at-point)
  (global-set-key (kbd "H-]") 'lsp-ui-doc-show)
  (global-set-key (kbd "H-[") 'lsp-ui-doc-hide)
  (global-set-key (kbd "H-i") 'org-clock-in)
  (global-set-key (kbd "H-j") 'spacemacs/org-clock-jump-to-current-clock)
  (global-set-key (kbd "H-o") 'org-clock-out)
  (global-set-key (kbd "H-h") 'evil-window-left)
  (global-set-key (kbd "H-l") 'evil-window-right)
  (global-set-key (kbd "H-SPC") 'helm-etags-select)
  ;; don't prompt when finding a tag
  (global-set-key (kbd "H-.") 'ab/find-tag-no-prompt)

  ;; special files menu >>>
  (spacemacs|define-transient-state ab|goto-special-file
    :title "Go to a 'special' file (project-specific)"
    :doc
    "\n [_t_] TODOs list [_c_] change log [_r_/_R_] README{.org/.md} \n [_i_] .gitignore [_m_] Makefile [_q_] quit"
    :bindings
    ("t" org-projectile/goto-todos :exit t)
    ("c" (find-file (concat (projectile-project-root) "CHANGELOG.org")) :exit t)
    ("R" (find-file (concat (projectile-project-root) "README.md")) :exit t)
    ("r" (find-file (concat (projectile-project-root) "README.org")) :exit t)
    ("i" (find-file (concat (projectile-project-root) ".gitignore")) :exit t)
    ("m" (find-file (concat (projectile-project-root) "Makefile")) :exit t)
    ("q" nil :exit t)) 

  (define-key evil-normal-state-map (kbd "H-g")
    'spacemacs/ab|goto-special-file-transient-state/body)

  (spacemacs/set-leader-keys (kbd "<ESC>") 'spacemacs/kill-this-buffer)

  ;; use ripgrep instead of grep (way faster!)
  ;; borrowed from https://gist.github.com/pesterhazy/fabd629fbb89a6cd3d3b92246ff29779
  (evil-leader/set-key "/" 'spacemacs/helm-project-do-ag)
  (setq helm-ag-base-command "rg --vimgrep --no-heading --smart-case")

  ;; latex -- textlint

  (require 'flycheck)
  (flycheck-define-checker textlint
    "A linter for textlint."
    :command ("npx" "textlint"
              "--config" "/home/bochkarev/.spacemacs.d/.textlintrc"
              "--format" "unix"
              "--rule" "write-good"
              "--rule" "no-start-duplicated-conjunction"
              "--rule" "max-comma"
              "--rule" "terminology"
              "--rule" "period-in-list-item"
              "--rule" "abbr-within-parentheses"
              "--rule" "alex"
              "--rule" "common-misspellings"
              "--rule" "en-max-word-count"
              "--rule" "diacritics"
              "--rule" "stop-words"
              "--plugin"
              (eval
               (if (derived-mode-p 'tex-mode)
                   "latex"
                 "@textlint/text"))
              source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode latex-mode org-mode markdown-mode)
    )
  (add-to-list 'flycheck-checkers 'textlint)

  ;; ctags config
  (setq projectile-tags-command "ctags -Re --tag-relative=yes --exclude=@.ctagsignore -f \"%s\" %s .")

  (defun ab/find-tag-no-prompt ()
    "Jump to the tag at point without prompting."
    (interactive)
    (find-tag (find-tag-default)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; mushroom-specific code

  (spacemacs|define-transient-state ab|org-db-menu
    :title "The database commands:"
    :doc
    "\n [_d_] Headings [_t_] #hastags [_f_] files [_m_] @-mentions [_r_] reading file [_q_] quit"
    :bindings
    ("d" org-db-headings :exit t)
    ("t" org-db-hashtags :exit t)
    ("m" org-db-@ :exit t)
    ("f" org-db-files :exit t)
    ("r" (find-file org-readme-file) :exit t)
    ("q" nil :exit t))

  (global-set-key (kbd "H-d")
    'spacemacs/ab|org-db-menu-transient-state/body)
  ;; org-roam setup

  (setq org-roam-directory "~/PKB/notes/")
  (setq org-roam-link-title-format "§ %s") ;; maybe? 🕮 § (doesn't look good in bold?)

  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point) ""
           :file-name "refs/${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n#+TAGS: ${keywords}\n\n"
           :unnarrowed t
           :immediate-finish t)))

  (defun ab-full-orf ()
    (interactive)
    (let ((helm-full-frame t))
      (org-roam-find-file)))

  (setq my-bib "~/Dropbox/bibliography/references.bib")  ;; needed for =bib= expansion

  ;; theme / visuals set up
  (load-theme 'leuven-dark t)

  ;; set default browser
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser")


  ;; protocols integration
  ;; see https://sidhartharya.me/integrating-org-protocol-with-qutebrowser/
  (use-package org-protocol
     :after org)

  ;; capture templates
  (setq org-capture-templates
        (quote (
                ("t" "New TODO (project-specific)" entry (file+headline (lambda () (concat (projectile-project-root)  org-projectile-per-project-filepath)) "Current project TODOs")
                 "* TODO %?\n%U\n%a\n" :prepend t)
                ("n" "Notation note (project-specific)" item (file+headline (lambda () (concat (projectile-project-root)  "notation.org")) "Table of symbols (notation)")
                 "- %?\n")
                ("f" "New further work note (project-specific)" entry (file+headline (lambda () (concat (projectile-project-root)  "further.org")) "Notes")
                 "* %?\n%U\n%a\n" :prepend t)
                ("c" "=== Current: fleeting notes and TODOs === ")
                ("ct" "Current TODO (current.org)" entry (file+headline org-current-file "Daily inbox")
                 "* TODO %? \n%a\n" :prepend t)
                ("cn" "Current (fleeting) note (current.org)" entry (file+headline org-current-file "Daily inbox")
                 "* %? \n%a\n" :prepend t)
                ("C" "Changelog entry (project-specific)" entry(file+headline (lambda () (concat (projectile-project-root) "CHANGELOG.org")) "Running changelog")
                 "* %U: %? \n%a\n" :prepend t)
                ("b" "========== [b] Bookmarks / readme notes====================")
                ("br" "Research-related entry" entry (file+headline org-readme-file "Research-related notes")
                 "* %a \n Captured: %U\n %?\n")
                ("bg" "General note (link)" entry (file+headline org-readme-file "General notes")
                 "* %a\n Captured: %U\n %?\n\n")
                ("w" "Web note idea (blog)" entry (file+headline org-blog-file "Ideas for notes")
                 "* %?\n%U\n")
                ("d" "A distraction!" entry (file org-distractions-file)
                 "* %?\n Link: %a\n Captured: %U\n")
                ("Q" "A quote to keep" entry (file+headline org-quotes-file "Q-list")
                 "* %?\n" :empty-lines 1)
                ("s" "Daily summary" plain (file+olp+datetree org-daily-summary-file) (file "~/org/day_summary.org")
                 :kill-buffer t)
                ("r" "Daily result" entry (file+olp org-current-file "Daily inbox" "Results")
                 "* %? \n%a\n%U\n" :prepend t))))

  ;; refiling config
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

  ;; org-db config
  (load "~/.spacemacs.d/layers/org-mushroom/org-db.el")

  ;; some additional markup 
  (defun org-add-my-extra-markup ()
    "Add highlight emphasis."
    (add-to-list 'org-font-lock-extra-keywords
                 '("@[A-Za-z]+"
                   (0 '(font-lock-keyword-face))))
  (add-to-list 'org-font-lock-extra-keywords 
               '("[^\\w]\\(\\#[A-Za-z\-]+\\)"
                 (1 '(font-lock-keyword-face)))))
  (add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-markup)

  ;; some julia-mode customizations
  (defun ab|julia-send-func-def-to-repl ()
    "Sends the current function definition to REPL."
    (interactive)
    (save-excursion (search-backward "function" nil 'error-if-not-found)
                    (let ((pos (line-beginning-position))
                          (start-indent (current-indentation))
                          (case-fold-search nil))
                      (while (and (search-forward "end" nil 'error-if-not-found)
                                  (not (= (current-indentation) start-indent))))
                      (set-mark pos))
                    (julia-repl-send-region-or-line)))

  (defun ab|julia-close-this ()
    "Adds `end' on the next line, with the same indent."
    (interactive)
    (save-excursion (let (cur-indent (current-indentation))
                      (move-end-of-line nil)
                      (newline)
                      (insert "end")
                      (julia-indent-line))))

  (spacemacs/set-leader-keys-for-major-mode 'julia-mode "sf" 'ab|julia-send-func-def-to-repl)

  (evil-define-key '(normal insert) julia-mode-map (kbd "H-<return>") 'ab|julia-close-this)
  ;; (evil-define-key '(normal insert) julia-mode-map (kbd "H-SPC") 'evil-unimpaired/insert-space-below)
  ;; (evil-define-key '(normal insert) julia-mode-map (kbd "H-S-SPC") 'evil-unimpaired/insert-space-above)
  ;; (evil-define-key '(insert) julia-mode-map (kbd "H-e") '(lambda ()
  ;;                                                          (interactive)
  ;;                                                          (insert "∈")))
  ;; (evil-define-key '(insert) julia-mode-map (kbd "H-'") '(lambda ()
  ;;                                                          (interactive)
  ;;                                                          (insert "′")))

  (spacemacs|define-transient-state ab|julia-insert-symbol
    :title "Insert symbol"
    :doc
    "\n [_a_] α [_b_] β [_p_] π [_D_] Δ [_d_] δ\n [_'_] prime [_i_] in [_n_] not in [_q_] quit"
    :bindings
    ("a"  (insert "α") :exit t)
    ("b"  (insert "β") :exit t)
    ("p"  (insert "π") :exit t)
    ("D"  (insert "Δ") :exit t)
    ("d"  (insert "δ") :exit t)
    ("'"  (insert "′") :exit t)
    ("i"  (insert "∈") :exit t)
    ("n"  (insert "∉") :exit t)
    ("q" nil :exit t))

  (evil-define-key '(insert) julia-mode-map (kbd "H-'") 'spacemacs/ab|julia-insert-symbol-transient-state/body)
)



;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol nil)
 '(flycheck-checker-error-threshold 700)
 '(hl-todo-keyword-faces
   '(("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2d9574")
     ("PROG" . "#4f97d7")
     ("OKAY" . "#4f97d7")
     ("DONT" . "#f2241f")
     ("FAIL" . "#f2241f")
     ("DONE" . "#86dc2f")
     ("NOTE" . "#b1951d")
     ("KLUDGE" . "#b1951d")
     ("HACK" . "#b1951d")
     ("TEMP" . "#b1951d")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f")))
 '(package-selected-packages
   '(vimrc-mode dactyl-mode toml-mode ron-mode racer rust-mode flycheck-rust cargo tern npm-mode nodejs-repl js2-mode js-doc import-js grizzl helm-gtags ggtags counsel-gtags counsel swiper add-node-modules-path ein polymode anaphora websocket zenburn-theme zen-and-art-theme yasnippet-snippets yapfify yaml-mode ws-butler writeroom-mode winum white-sand-theme which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package unicode-fonts unfill undo-tree underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme treemacs-projectile treemacs-persp treemacs-magit treemacs-icons-dired treemacs-evil toxi-theme toc-org tao-theme tangotango-theme tango-plus-theme tango-2-theme tagedit symon symbol-overlay sunny-day-theme sublime-themes subatomic256-theme subatomic-theme string-inflection string-edit sphinx-doc spaceline-all-the-icons spacegray-theme soothe-theme solarized-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme smeargle slim-mode seti-theme scss-mode sass-mode reverse-theme restart-emacs rebecca-theme rainbow-delimiters railscasts-theme quickrun pytest pyenv-mode py-isort purple-haze-theme pug-mode professional-theme prettier-js poetry planet-theme pippel pipenv pip-requirements phoenix-dark-pink-theme phoenix-dark-mono-theme pdf-view-restore pcre2el password-generator paradox ox-hugo ox-gfm overseer orgit-forge organic-green-theme org-superstar org-roam-bibtex org-rich-yank org-projectile org-present org-pomodoro org-msg org-mime org-journal org-download org-cliplink org-brain open-junk-file omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme nose noctilux-theme naquadah-theme nameless mwim mustang-theme multi-line mu4e-maildirs-extension mu4e-alert monokai-theme monochrome-theme molokai-theme moe-theme modus-vivendi-theme modus-operandi-theme mmm-mode minimal-theme material-theme markdown-toc majapahit-theme magit-section madhat2r-theme macrostep lush-theme lsp-ui lsp-python-ms lsp-pyright lsp-origami lsp-latex lorem-ipsum live-py-mode link-hint light-soap-theme leuven-theme kaolin-themes jbeans-theme jazz-theme ir-black-theme inkpot-theme indent-guide importmagic impatient-mode hybrid-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation heroku-theme hemisu-theme helm-xref helm-themes helm-swoop helm-rtags helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-org helm-mu helm-mode-manager helm-make helm-lsp helm-ls-git helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag hc-zenburn-theme gruvbox-theme gruber-darker-theme graphviz-dot-mode grandshell-theme gotham-theme google-translate google-c-style golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ gh-md gandalf-theme fuzzy font-lock+ flyspell-correct-helm flycheck-ycmd flycheck-rtags flycheck-pos-tip flycheck-package flycheck-ledger flycheck-elsa flx-ido flatui-theme flatland-theme farmhouse-theme fancy-battery eziam-theme eyebrowse expand-region exotica-theme evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-snipe evil-org evil-numbers evil-matchit evil-lisp-state evil-lion evil-ledger evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-easymotion evil-commentary evil-collection evil-cleverparens evil-args evil-anzu eval-sexp-fu ess-R-data-view espresso-theme emr emmet-mode elisp-slime-nav elfeed-org elfeed-goodies editorconfig dumb-jump drag-stuff dracula-theme dotenv-mode doom-themes doom-modeline django-theme disaster dired-quick-sort diminish devdocs define-word darktooth-theme darkokai-theme darkmine-theme darkburn-theme dap-mode dakrone-theme cython-mode cyberpunk-theme csv-mode cpp-auto-include conda company-ycmd company-web company-rtags company-reftex company-math company-c-headers company-auctex company-anaconda column-enforce-mode color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized clues-theme clean-aindent-mode chocolate-theme cherry-blossom-theme centered-cursor-mode ccls busybee-theme bubbleberry-theme browse-at-remote blacken birds-of-paradise-plus-theme badwolf-theme auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile auctex-latexmk apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme alect-themes aggressive-indent afternoon-theme ace-link ace-jump-helm-line ac-ispell))
 '(pdf-view-midnight-colors '("#b2b2b2" . "#292b2e"))
 '(warning-suppress-log-types '((comp) (comp) (comp) (comp)))
 '(warning-suppress-types '((comp) (comp) (comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
